//-----------------------------------------------------------------experiment-1 (two pass assembler) 
#include<stdio.h>
#include<string.h>
#include<conio.h>
void main()
{
char *code[9][4]={
{"PRG1","START","",""},
{"","USING","*","15"},
{"","L","",""},
{"","A","",""},
{"","ST","",""},
{"FOUR","DC","F",""},
{"FIVE","DC","F",""},
{"TEMP","DS","1F",""},
{"","END","",""}
};
char av[2],avail[15]={'N','N','N','N','N','N','N','N','N','N','N','N','N','N','N'};
int i,j,k,count[3],lc[9]={0,0,0,0,0,0,0,0,0},loc=0;
clrscr();
printf("----------------------------------------------------\n");
printf("LABEL\t\tOPCODE\n");
printf("----------------------------------------------------\n\n");
for(i=0;i< =8;i++)
{
for(j=0;j< =3;j++)
{
printf("%s\t\t",code[i][j]);
}
j=0;
printf("\n");
}
getch();
printf("-----------------------------------------------------");
printf("\nVALUES FOR LC : \n\n");
for(j=0;j< =8;j++)
{
if((strcmp(code[j][1],"START")!=0)&&(strcmp(code[j][1],"USING")!=0)&&(strcmp(co
de[j][1],"L")!=0))
lc[j]=lc[j-1]+4;
printf("%d\t",lc[j]);
}
printf("\n\nSYMBOL TABLE:\n----------------------------------------------------\n");
printf("SYMBOL\t\tVALUE\t\tLENGTH\t\tR/A");
printf("\n----------------------------------------------------\n");
for(i=0;i< 9;i++)
{
if(strcmp(code[i][1],"START")==0)
{
printf("%s\t\t%d\t\t%d\t\t%c\n",code[i][0],loc,4,'R');
}
else if(strcmp(code[i][0],"")!=0)
{
printf("%s\t\t%d\t\t%d\t\t%c\n",code[i][0],loc,4,'R');
loc=4+loc;
}
else if(strcmp(code[i][1],"USING")==0){}
else
{loc=4+loc;}
}
printf("----------------------------------------------------");
printf("\n\nBASE TABLE:\n-------------------------------------------------------\n");
printf("REG NO\t\tAVAILIBILITY\tCONTENTS OF BASE TABLE");
printf("\n-------------------------------------------------------\n");
for(j=0;j< =8;j++)
{
if(strcmp(code[j][1],"USING")!=0)
{}
else
{
strcpy(av,code[j][3]);
}
}
count[0]=(int)av[0]-48;
count[1]=(int)av[1]-48;
count[2]=count[0]*10+count[1];
avail[count[2]-1]='Y';
for(k=0;k< 16;k++)
{
printf(" %d\t\t %c\n",k,avail[k-1]);
}
printf("-------------------------------------------------------\n");
printf("Continue..??");
getchar();
printf("PASS2 TABLE:\n\n");
printf("LABEL\t\tOP1\t\tLC\t\t");
printf("\n----------------------------------------------------\n");
loc=0;
for(i=0;i< =8;i++)
{
for(j=0;j< =3;j++)
{
printf("%s\t\t",code[i][j]);
}
j=0;
printf("\n");
}
printf("-----------------------------------------------------");
getch();
}
 
//-----------------------------------------------------------------experiment-2 (two pass macro processor) 
#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<stdlib.h>
Struct deftab
{
char lab[10];
char opc[10];
char oper[10];
}
d[10];
void main();
{
Char label[10], opcode[10], newlabel[10], newoperand[10];
Char macroname[10];
Int I,lines;
FILE*f1,*f2,*f3;
Clrscr(); 
f1=fopen(“macin.dat”,”r”);
f2=fopen(“macout.dat”,”w”);
f1=fopen(“deftab.dat”,”r”);
fscan(f1,”%s%s%s”,label,opcode,operand);
while(strcmp(opcode,”END”)!=0)
{
If(strcmp(opcode,”MACRO”)==0)
{
strcpy(macroname,label);
fscanf(f1,”%s%s%s,label,opcode,operand);
lines=0;
while(strcmp(opcode,”MEND”)!=0)
{
fprint(f3,”%s\t%s\t%s\n”,label,opcode,operand);
strcpy(d[lines].lab,label);
strcpy(d[lines].opc,opcode);
strcpy(d[lines].oper,opcode);
fscanf(f1,”%s%s%s”,label,opcode,operand);
lines++;
}
}
else if(strcmp(opcode,macroname)==0)
{
printf(“Lines=%d\n”,lines); 
for(i=0;i<lines;i++)
{
fprintf(f2,”%s\t%s\t%s\n”,d[i].lab,d[i].opc,d[i].oper);
printf(“DLAB=%s\nDOPC=%s\nDOPER=%s\n”,d[i].lab,d[i].opc,d[i].oper);
}
}
else
fprintf(f2,”%s\t%s\n”,label,opcode,operand);
fclose(f1);
fclose(f2);
fclose(f3);
printf(“FINISHED”);
getch();
}
//input file
INPUT FILE:
MACIN.DAT
CALC START 1000
SUM MACRO **
** LDA #5
** ADD #10
**STA 2000
** MEND **
** LDA LENGTH
** COMP ZERO 
//OUTPUT FILE:
MACOUT.DAT
CALC START 1000
** LDA LENGTH
**COMP ZERO
** LEQ LOOP
** LDA #5
** ADD #10
** STA 2000
**END**
//DEFTAB.DAT
** LDA #5
**ADD #10
**STA 2000 



//-----------------------------------------------------------------experiment-3 (lexical analyzer) 
#include<stdio.h>
#include<conio.h>
#include<math.h>
#include<string.h>
#include<malloc.h>
#include<process.h>
#include<ctype.h>
file *fp;
char delim[14]={‘ ‘,’\t’,’\n’,’,’,’,’;’,’(‘,’)’,’{‘,’}’,’[‘,’]’,’#’,’<’,’>’};
char
oper[7]={“int”,”float”,”char”,”double”,”bool”,”void”,”extern”,”unsigned”,”goto”,”static”,”cl
ass”,”struct”,”for”,”if”,”else”,”return”,”register”,”long”,”while”,”do”};
char predict[2][12]={“include”,”define”};
char herader[6][15]={“stdio.h”,”conio.h”,”malloc.h”,”process.h”,”string.h”,”ctype.h”};
void skipcomment();
void analyze();
void check(char[]);
int isdelim(char);
int isop(char);
int fop=0,numflag=0,f=0;
char c,ch,sop;
void main()
{
char fname[12];
clrscr();
printf(“\n enter filename:”);
scanf(“%s”,fname);
fp=fopen(fname.”r”);
if(fp==null)
printf(“\nthe file does not exists”);
else
analyze();
printf(“\n end of file \n”);
getch();}
void analyze()
{char token[50];
int j=0;
while(!feof(fp))
{
c=getc(fp);
if(c==’/’)
{}
else if(c==’ ‘)
while((c=getc(fp))!=’’);
else if(isalphac(c)){
if(numflag==1){
token[j]=’\0’;
check(token);
numflag=0;
j=0;f=0;
}
else{
token[j]=c;
j++;
}
if(f==0)
f=1;
}
else if(islnum(c)){
if(isdelim(c))
{
if(numflag==1)
{token[j]=’\0’;
check(token);
numflag=0;}
if(f==1)
{token[j]=’\0’;
numflag=0;
check(token);}
j=0;
f=0;
printf(“\n delimiters \t%c”,c);}
else if(isop(c))
{if(numflag==1)
{token[j]=’\0’;
check(token);
numflag=0;
j=0;f=0;}
if(f==1){
token[j]=’\0’;
j=0;f=0;
numflag=0;
check(token);}
if(fop==1)
{fop=0;
printf(“\n operator \t%c%c”,c,sop);}
else
printf(“\n operator \t%c”,c);}
else if(c==’.’)
{token[j]=c;
j++;}}}}
int isdelim(char c)
{int i;
for(i=0;i<14;i++)
{if(c==delim[i])
return 1;}
return 0;}
int isop(char c)
{int i,j;
char ch;
for(i=0;i<7;i++)
{if(c==oper[i])
{ch=getc(fp);
for(j=0;j<6;j++)
{if(ch==oper[j])
{fop=1;
sop=ch;
return 1;}}
ungetc(ch,fp);
return 1;
}}
return 0;
}
void check(char t[])
{
int i;
if(numflag==1)
{
printf("\n number \t\t%s",t);
return;
}
for(i=0;i<2;i++)
{
if(strcmp(t,predirect[i])==0)
{
printf("\n preprocessor directive %s",t);
return;
}}
for(i=0;i<6;i++)
{
if(strcmp(t,header[i])==0)
{
printf("\n header file \t%s",t);
return;
}}for(i=0;i<21;i++)
{
if(strcmp(key[i],t)==0){
printf("\n keyword \t\t%s",key[i]);
return;
}}
printf("\n identifier \t%s",t);
}
void skipcomment(){
ch=getc(fp);
if(ch=='/'){
while((ch=getc(fp)!='\0');}
else if(ch=='*')
{while(f==0)
{ ch=getc(fp);
if(c=='/')
f=1;
}}
f=0;}
file entered :string.txt
wcm:procedure(rate,start,finish);
declare(cost,rate,start,finish);
fixed binary(31)static;
cost=rate+(start-finish)+2*rate*(start-finish-100);
return(cost);
end;





exp3.py

import re
s = raw_input("Enter filename : ") f =
open(s, 'r')
text = f.read()
symbols = ['!', '@', '#', '$', '%', '&', '^', '*']
oparators = ['+', '-', '*', '/', '=', '+=', '-=', '==', '<', '>', '<=', '>=']
keywords = ['auto','break', 'case', 'char', 'const', 'continue', 'default', 'do',
'double', 'else', 'enum', 'extern', 'float', 'for', 'goto', 'if',
'int', 'long', 'register', 'return', 'short', 'signed', 'sizeof', 'static',
'struct', 'switch', 'typedef', 'union', 'unsigned', 'void', 'volatile', 'while']
delimiters = [' ', ' ', '.', ',', '\n', ';', '(', ')', '<', '>', '{', '}', '[', ']']
in_keywords = []
in_spl_symbols = []
in_oparators = []
in_delimiters = []
in_identifiers = []
in_constants = []
tokens = [] isStr =
False isWord =
False isCmt = 0
token = ''
for i in text:
if i == '/':
isCmt = isCmt+1
elif isCmt == 2:
if i == '\n':
token = ''
isCmt = 0
elif i == '"' or i == "'": if
isStr:
tokens.append(token) token
= ''
isStr = not isStr
elif isStr:
token = token+i
elif i in symbols:
tokens.append(i)
elif i.isalnum() and not isWord:
isWord = True
token = i
elif (i in delimiters) or (i in oparators): if
token:
tokens.append(token) token
= ''
if not (i==' ' or i=='\n' or i==' '):
tokens.append(i)
elif isWord: token =
token+i
for token in tokens:
if token in symbols:
in_spl_symbols.append(token)
elif token in oparators:
in_oparators.append(token)
elif token in keywords:
in_keywords.append(token)
elif re.search("^[_a-zA-Z][_a-zA-Z0-9]*$",token):
in_identifiers.append(token)
elif token in delimiters:
in_delimiters.append(token)
else:
in_constants.append(token)
print("No of tokens = ", len(tokens)) print("\nNo.
of keywords = ",len(in_keywords)) print(in_keywords);
print("\nNo. of special symbols = ",len(in_spl_symbols)) print(in_spl_symbols); print("\nNo. of
oparators = ",len(in_oparators))
print(in_oparators);
print("\nNo. of identifiers = ",len(in_identifiers)) print(in_identifiers);
print("\nNo. of constants = ",len(in_constants)) print(in_constants);
print("\nNo. of delimiters = ",len(in_delimiters)) print(in_delimiters);
f.close()




//-----------------------------------------------------------------experiment-4 (operator precedence parser) 
#include<stdio.h>
#include<string.h>
char *input;
int i=0;
char lasthandle[6],stack[50],handles[][5]={")E(","E*E","E+E","i","E^E"};
//(E) becomes )E( when pushed to stack 
int top=0,l;
char prec[9][9]={
 /*input*/
 /*stack + - * / ^ i ( ) $ */
 /* + */ '>', '>','<','<','<','<','<','>','>',
 /* - */ '>', '>','<','<','<','<','<','>','>',
 /* * */ '>', '>','>','>','<','<','<','>','>',
 /* / */ '>', '>','>','>','<','<','<','>','>',
 /* ^ */ '>', '>','>','>','<','<','<','>','>',
 /* i */ '>', '>','>','>','>','e','e','>','>',
 /* ( */ '<', '<','<','<','<','<','<','>','e',
 /* ) */ '>', '>','>','>','>','e','e','>','>',
 /* $ */ '<', '<','<','<','<','<','<','<','>',
 };
int getindex(char c)
{
switch(c) 
{
 case '+':return 0;
 case '-':return 1;
 case '*':return 2;
 case '/':return 3;
 case '^':return 4;
 case 'i':return 5;
 case '(':return 6;
 case ')':return 7;
 case '$':return 8;
 }
}
int shift()
{
stack[++top]=*(input+i++);
stack[top+1]='\0';
}
int reduce()
{
int i,len,found,t;
for(i=0;i<5;i++)//selecting handles
 {
 len=strlen(handles[i]);
 if(stack[top]==handles[i][0]&&top+1>=len)
 {
 found=1;
 for(t=0;t<len;t++)
 {
 if(stack[top-t]!=handles[i][t])
 {
 found=0; 
 break;
 }
 }
 if(found==1)
 {
 stack[top-t+1]='E';
 top=top-t+1;
 strcpy(lasthandle,handles[i]);
 stack[top+1]='\0';
 return 1;//successful reduction
 }
 }
 }
return 0;
}
void dispstack()
{
int j;
for(j=0;j<=top;j++)
 printf("%c",stack[j]);
}
void dispinput()
{
int j;
for(j=i;j<l;j++)
 printf("%c",*(input+j));}
void main()
{
int j;
input=(char*)malloc(50*sizeof(char));
printf("\nEnter the string\n"); 
scanf("%s",input);
input=strcat(input,"$");
l=strlen(input);
strcpy(stack,"$");
printf("\nSTACK\tINPUT\tACTION");
while(i<=l) {
 shift();
 printf("\n");
 dispstack();
 printf("\t");
 dispinput();
 printf("\tShift");
 if(prec[getindex(stack[top])][getindex(input[i])]=='>') {
 while(reduce())
 {
 printf("\n");
 dispstack();
 printf("\t");
 dispinput();
 printf("\tReduced: E->%s",lasthandle);
 }}}
if(strcmp(stack,"$E$")==0)
 printf("\nAccepted;");
else printf("\nNot Accepted;");} 


//-----------------------------------------------------------------experiment-5 (check grammar) 
#include<stdio.h> #include<string.h> int
k=0,z=0,i=0,j=0,c=0; char
a[16],ac[20],stk[15],act[10]; void check();
int main()
{
EXPERIMENT NO. 5
puts("GRAMMAR is E->E+E \n E->E*E \n E->(E) \n E->id");
puts("enter input string ");
gets(a); c=strlen(a);
strcpy(act,"SHIFT->"); puts("stack
\t input \t action");
for(k=0,i=0; j<c; k++,i++,j++)
{
if(a[j]=='i' && a[j+1]=='d')
{ stk[i]=a[j];
stk[i+1]=a[j+1];
stk[i+2]='\0';
a[j]=' ';
a[j+1]=' ';
printf("\n$%s\t%s$\t%sid",stk,a,act);
check(); }
else {
stk[i]=a[j]; stk[i+1]='\0';
a[j]=' ';
printf("\n$%s\t%s$\t%ssymbols",stk,a,act);
check();
}
}
}
void check()
{
strcpy(ac,"REDUCE TO E");
for(z=0; z<c; z++) if(stk[z]=='i'
&& stk[z+1]=='d') {
stk[z]='E'; stk[z+1]='\0';
printf("\n$%s\t%s$\t%s",stk,a,ac);
j++;
}
for(z=0; z<c; z++)
if(stk[z]=='E' && stk[z+1]=='+' && stk[z+2]=='E')
{ stk[z]='E';
stk[z+1]='\0'; stk[z+2]='\0';
printf("\n$%s\t%s$\t%s",stk,a,ac);
i=i-2;
}
for(z=0; z<c; z++)
if(stk[z]=='E' && stk[z+1]=='*' && stk[z+2]=='E')
{ stk[z]='E';
stk[z+1]='\0'; stk[z+1]='\0';
printf("\n$%s\t%s$\t%s",stk,a,ac);
i=i-2;
}
for(z=0; z<c; z++)
if(stk[z]=='(' && stk[z+1]=='E' && stk[z+2]==')')
{ stk[z]='E';
stk[z+1]='\0'; stk[z+1]='\0';
printf("\n$%s\t%s$\t%s",stk,a,ac);
i=i-2;
} }






//-----------------------------------------------------------------experiment-5 (code optimization techniques) 
#include<stdio.h>
#include<conio.h>
#include<string.h>
struct op
{ char l;
char r[20];
}
op[10],pr[10];
void main()
{ int a,i,k,j,n,z=0,m,q;
char *p,*l;
char temp,t;
char *tem;
clrscr();
printf("Enter the Number of Values:");
scanf("%d",&n);
for(i=0;i<n;i++)
{
printf("left: ");
op[i].l=getche();
printf("\tright: ");
scanf("%s",op[i].r);
}
printf("Intermediate Code\n") ;
for(i=0;i<n;i++)
{
printf("%c=",op[i].l);
printf("%s\n",op[i].r);
}
for(i=0;i<n-1;i++)
{ temp=op[i].l;
for(j=0;j<n;j++)
{
p=strchr(op[j].r,temp);
if(p)
{
pr[z].l=op[i].l;
strcpy(pr[z].r,op[i].r);
z++; }}}
pr[z].l=op[n-1].l;
strcpy(pr[z].r,op[n-1].r);
z++;
printf("nAfter Dead Code Eliminationn");
for(k=0;k<z;k++) {
printf("%ct=",pr[k].l);
printf("%sn",pr[k].r);
}
for(m=0;m<z;m++) {
tem=pr[m].r;
for(j=m+1;j<z;j++) {
p=strstr(tem,pr[j].r);
if(p) {
t=pr[j].l;
pr[j].l=pr[m].l;
for(i=0;i<z;i++) {
l=strchr(pr[i].r,t) ;
if(l) {
a=l-pr[i].r;
printf("pos: %d",a);
pr[i].r[a]=pr[m].l; }}}}}
printf("Eliminate Common Expression\n");
for(i=0;i<z;i++)
{
printf("%c\t=",pr[i].l);
printf("%s\n",pr[i].r);
}
for(i=0;i<z;i++)
{
for(j=i+1;j<z;j++)
{
q=strcmp(pr[i].r,pr[j].r);
if((pr[i].l==pr[j].l)&&!q)
{
pr[i].l='\0';
strcpy(pr[i].r,'\0');
}}}
printf("Optimized Code\n");
for(i=0;i<z;i++)
{ if(pr[i].l!='\0')
{
printf("%c=",pr[i].l);
printf("%s\n",pr[i].r);
}
}
getch();
}



code optimization technique

#include<stdio.h>
#include<string.h>
struct op
{
char l;
char r[20];
}
op[10],pr[10];
void main()
{
int a,i,k,j,n,z=0,m,q;
char *p,*l;
char temp,t;
char *tem;
printf("Enter the Number of Values:");
scanf("%d",&n);
for(i=0;i<n;i++)
{
printf("left: ");
scanf(" %c",&op[i].l);
printf("right: ");
scanf(" %s",&op[i].r);
}
printf("Intermediate Code\n") ;
for(i=0;i<n;i++)
{
printf("%c=",op[i].l);
printf("%s\n",op[i].r);
}
for(i=0;i<n-1;i++)
{
temp=op[i].l;
for(j=0;j<n;j++)
{
p=strchr(op[j].r,temp);
if(p)
{
pr[z].l=op[i].l;
strcpy(pr[z].r,op[i].
r);
z++;
}
}
}
pr[z].l=op[n-1].l;
strcpy(pr[z].r,op[n-1].r);
z++;
printf("\nAfter Dead Code Elimination\n");
for(k=0;k<z;k++)
{
printf("%c\t=",pr[k].l);
printf("%s\n",pr[k].r);
}
for(m=0;m<z;m++)
{
tem=pr[m].r;
for(j=m+1;j<z;j++)
{
p=strstr(tem,pr[j].r);
if(p)
{
t=pr[j].l;
pr[j].l=pr[m].l;
for(i=0;i<z;i++)
{
l=strchr(pr[i].r,t) ;
if(l)
{
a=l-pr[i].r;
printf("pos: %d\n",a);
pr[i].r[a]=pr[m].l;
}}}}}
printf("Eliminate Common Expression\n");
for(i=0;i<z;i++)
{
printf("%c\t=",pr[i].l);
printf("%s\n",pr[i].r);
}
for(i=0;i<z;i++)
{
for(j=i+1;j<z;j++)
{
q=strcmp(pr[i].r,pr[j].r);
if((pr[i].l==pr[j].l)&&!q)
{
pr[i].l='\0';
}
}
}
printf("Optimized Code\n");
for(i=0;i<z;i++)
{
if(pr[i].l!='\0')
{
printf("%c=",pr[i].l);
printf("%s\n",pr[i].r);
}
}
}


//-----------------------------------------------------------------experiment-6 (code generation) 
#include<stdio.h>
#include<conio.h>
#include<string.h>
char op[2],arg1[5],arg2[5],result[5];
void main()
{
 FILE *fp1,*fp2;
 fp1=fopen("input.txt","r");
 fp2=fopen("output.txt","w");
 while(!feof(fp1))
 {
 fscanf(fp1,"%s%s%s%s",op,arg1,arg2,result);
 if(strcmp(op,"+")==0)
 {
 fprintf(fp2,"\nMOV R0,%s",arg1);
 fprintf(fp2,"\nADD R0,%s",arg2);
 fprintf(fp2,"\nMOV %s,R0",result);
 }
 if(strcmp(op,"*")==0)
 {
 fprintf(fp2,"\nMOV R0,%s",arg1);
 fprintf(fp2,"\nMUL R0,%s",arg2);
 fprintf(fp2,"\nMOV %s,R0",result);
 }
 if(strcmp(op,"-")==0)
 {
 fprintf(fp2,"\nMOV R0,%s",arg1);
 fprintf(fp2,"\nSUB R0,%s",arg2);
 fprintf(fp2,"\nMOV %s,R0",result);
 }
 if(strcmp(op,"/")==0)
 {
 fprintf(fp2,"\nMOV R0,%s",arg1);
 fprintf(fp2,"\nDIV R0,%s",arg2);
 fprintf(fp2,"\nMOV %s,R0",result);
 }
if(strcmp(op,"=")==0)
 {
 fprintf(fp2,"\nMOV R0,%s",arg1);
 fprintf(fp2,"\nMOV %s,R0",result);
 }
 }
 fclose(fp1);
 fclose(fp2);
 getch();
}
//input.txt
+ a b t1
* c d t2
- t1 t2 t
= t ? x
//output.txt
MOV R0,a
ADD R0,b
MOV t1,R0
MOV R0,c
MUL R0,d
MOV t2,R0
MOV R0,t1
SUB R0,t2
MOV t,R0
MOV R0,t
MOV x,R0



//-----------------------------------------------------------------experiment-7 (lex yacc) 
//lex
{definition}
%%
{rules}
%%
{user subroutines}
Ex1: test1.l
%{
 #include<stdio.h>
%}
LETTER[a-z][A-Z]
DIGIT[0-9]
%%
begin { printf(“Recognized Keyword: %s\n”, yytext);}
if
{printf(“Recognised Keyword: %s\n”, yytext);}
{LETTER}({LETTER}|{DIGIT})* {printf(“Recognized ID: %s\n”,yytext);}
%%
Main()
{
yylex();
}
Commands:
$lex test1.l
$cc lex.yy.c –ll 
//yacc
{definition}
%%
{rules}
%%
{programs}
Ex1: test.y
%token NUM
% start S
%%
S:E{printf(“The value of the expression is %d\n”,$1);}
;
E:E’+’T($$=$1+$3}
;
E:T {$$=$1;}
;
T:T’*’F{$$=$1*$3}
;
T:F {$$=$1;}
;
F:NUM {$$=$1}
;
%% 
